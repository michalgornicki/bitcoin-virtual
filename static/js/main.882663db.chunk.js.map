{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","bitcoinPrice","setBitcoinPrice","accountPLN","setAccountPLN","accountBTC","setAccountBTC","useEffect","bitcoin","randomNumber","parseFloat","Math","random","toFixed","setTimeout","className","style","color","Button","variant","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAwGeA,MAnGf,WACE,MAAwCC,mBAAS,KAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,mBAAS,KAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAU,SAAVA,IACJ,IAAIC,EAAeC,YAA4B,GAAhBC,KAAKC,SAAgB,IAAIC,QAAQ,IAChEX,GAAgB,SAACD,GAAD,OACdS,YAAYT,EAAeQ,GAAcI,QAAQ,OAEnDC,WAAWN,EAAS,MAmDtB,OACE,sBAAKO,UAAU,UAAf,UAGE,sBAAKA,UAAU,QAAf,qBACWd,EAAc,IADzB,OAEE,sBAAKc,UAAU,UAAUC,MAAO,CAAEC,MAAOhB,EAAe,IAAO,iBAAmB,oBAAlF,cApDJ,IACAS,aAAcT,EAAe,KAAQA,EAAgB,KAAKY,QAAQ,IAClE,KAkDI,UAEF,sBAAKE,UAAU,oBAAf,UACE,qBAAKA,UAAU,UAAf,4BACA,sBAAKA,UAAU,UAAf,UAA0BZ,EAA1B,UACA,sBAAKY,UAAU,UAAf,UAA0BV,EAA1B,aAGF,sBAAKU,UAAU,+BAAf,UACE,cAACG,EAAA,EAAD,CAAQC,QAAQ,sBAAsBC,QAvDzB,WACbjB,GAAc,KAChBC,EAAcD,EAAa,KAC3BG,GAAc,SAACD,GAAD,OACZK,YAAYL,EAAa,IAAOJ,GAAcY,QAAQ,SAGxDT,EAAc,GACdE,GAAc,SAACD,GAAD,OACZK,YAAYL,EAAaF,EAAaF,GAAcY,QAAQ,SA8C5D,kCAGA,cAACK,EAAA,EAAD,CAAQC,QAAQ,sBAAsBC,QA5CtB,WACpBhB,EAAc,GACdE,GAAc,SAACD,GAAD,OACZK,YAAYL,EAAaF,EAAaF,GAAcY,QAAQ,QAyC1D,iCAGA,cAACK,EAAA,EAAD,CAAQC,QAAQ,wBAAwBC,QAxC1B,WACdf,GAAc,IAChBD,EAAcM,YAAYP,EAAaF,EAAe,IAAIY,QAAQ,KAClEP,GAAc,SAACD,GAAD,OAAgBK,YAAYL,EAAa,IAAKQ,QAAQ,SAEpET,EACEM,YAAYP,EAAaF,EAAeI,GAAYQ,QAAQ,KAE9DP,GAAc,SAACD,GAAD,OAAgBK,YAAY,GAAGG,QAAQ,SAgCnD,0BAGA,cAACK,EAAA,EAAD,CAAQC,QAAQ,wBAAwBC,QA/BvB,WACrBhB,EACEM,YAAYP,EAAaF,EAAeI,GAAYQ,QAAQ,KAE9DP,EAAc,IA2BV,iCClFOe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.882663db.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [bitcoinPrice, setBitcoinPrice] = useState(5000);\n  const [accountPLN, setAccountPLN] = useState(10000);\n  const [accountBTC, setAccountBTC] = useState(0);\n\n  useEffect(() => {\n    bitcoin();\n  }, []);\n\n  const bitcoin = () => {\n    let randomNumber = parseFloat((Math.random() * 20 - 10).toFixed(3));\n    setBitcoinPrice((bitcoinPrice) =>\n      parseFloat((bitcoinPrice + randomNumber).toFixed(3))\n    );\n    setTimeout(bitcoin, 1000);\n  };\n\n\n  let percentValue = () => \n    \"(\" +\n    parseFloat((((bitcoinPrice - 5000) / bitcoinPrice) * 100).toFixed(2)) +\n    \"%)\";\n\n\n\n  const buyBitcoin = () => {\n    if (accountPLN >= 1000) {\n      setAccountPLN(accountPLN - 1000);\n      setAccountBTC((accountBTC) =>\n        parseFloat((accountBTC + 1000 / bitcoinPrice).toFixed(6))\n      );\n    } else {\n      setAccountPLN(0);\n      setAccountBTC((accountBTC) =>\n        parseFloat((accountBTC + accountPLN / bitcoinPrice).toFixed(6))\n      );\n    }\n  };\n\n  const buyMAXBitcoin = () => {\n    setAccountPLN(0);\n    setAccountBTC((accountBTC) =>\n      parseFloat((accountBTC + accountPLN / bitcoinPrice).toFixed(6))\n    );\n  };\n\n  const sellBitcoin = () => {\n    if (accountBTC >= 0.1) {\n      setAccountPLN(parseFloat((accountPLN + bitcoinPrice / 10).toFixed(6)));\n      setAccountBTC((accountBTC) => parseFloat((accountBTC - 0.1).toFixed(6)));\n    } else {\n      setAccountPLN(\n        parseFloat((accountPLN + bitcoinPrice * accountBTC).toFixed(6))\n      );\n      setAccountBTC((accountBTC) => parseFloat((0).toFixed(6)));\n    }\n  };\n\n  const sellMAXBitcoin = () => {\n    setAccountPLN(\n      parseFloat((accountPLN + bitcoinPrice * accountBTC).toFixed(6))\n    );\n    setAccountBTC(0);\n  };\n\n  return (\n    <div className=\"wrapper\">\n\n\n      <div className=\"price\">\n        1 BTC = {bitcoinPrice}{\" \"} PLN\n        <div className=\"percent\" style={{ color: bitcoinPrice > 5000 ? 'rgb(9, 255, 0)' : 'rgb(255, 39, 39)' }}> {percentValue()} </div>\n      </div>\n      <div className=\"account-container\">\n        <div className=\"account\">TOTAL BALANCE:</div>\n        <div className=\"account\">{accountPLN} PLN</div>\n        <div className=\"account\">{accountBTC} BTC</div>\n      </div>\n\n      <div className=\"button-container w-50 m-auto\">\n        <Button variant=\"primary m-1 btn-lg \" onClick={buyBitcoin}>\n          Buy BTC for 1000 PLN\n        </Button>\n        <Button variant=\"primary m-1 btn-lg \" onClick={buyMAXBitcoin}>\n          Buy BTC for MAX PLN\n        </Button>\n        <Button variant=\"secondary m-1 btn-lg \" onClick={sellBitcoin}>\n          Sell 0.1 BTC\n        </Button>\n        <Button variant=\"secondary m-1 btn-lg \" onClick={sellMAXBitcoin}>\n          Sell MAX BTC\n        </Button>\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}