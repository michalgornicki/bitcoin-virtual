{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","bitcoinPrice","setBitcoinPrice","accountPLN","setAccountPLN","accountBTC","setAccountBTC","change","setChange","useEffect","bitcoin","percent","randomNumber","parseFloat","Math","random","toFixed","console","log","setTimeout","className","Button","variant","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAqGeA,MAhGf,WACE,MAAwCC,mBAAS,KAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoCF,mBAAS,KAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA4BN,mBAAS,KAArC,mBAAOO,EAAP,KAAeC,EAAf,KAGAC,qBAAU,WACRC,IACAC,MACC,IAEH,IAAMD,EAAU,SAAVA,IACJ,IAAIE,EAAeC,YAA4B,GAAhBC,KAAKC,SAAgB,IAAIC,QAAQ,IAChEd,GAAgB,SAACD,GAAD,OACdY,YAAYZ,EAAeW,GAAcI,QAAQ,OAEnDC,QAAQC,IAAIjB,GACZkB,WAAWT,EAAS,MAGhBC,EAAU,SAAVA,IACJH,EAAUD,EAASN,GACnBkB,WAAWR,EAAS,MA8CtB,OACE,sBAAKS,UAAU,UAAf,UACE,sBAAKA,UAAU,QAAf,qBAAgCnB,EAAhC,WACA,sBAAKmB,UAAU,oBAAf,UACE,qBAAKA,UAAU,UAAf,4BACA,sBAAKA,UAAU,UAAf,UAA0BjB,EAA1B,UACA,sBAAKiB,UAAU,UAAf,UAA0Bf,EAA1B,aAGF,sBAAKe,UAAU,+BAAf,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,sBAAsBC,QArDzB,WACbpB,GAAc,KAChBC,EAAcD,EAAa,KAC3BG,GAAc,SAACD,GAAD,OACZQ,YAAYR,EAAa,IAAOJ,GAAce,QAAQ,OAExDC,QAAQC,IAAIb,KAEZD,EAAc,GACdE,GAAc,SAACD,GAAD,OACZQ,YAAYR,EAAaF,EAAaF,GAAce,QAAQ,SA2C5D,kCAGA,cAACK,EAAA,EAAD,CAAQC,QAAQ,8BAA8BC,QAzC9B,WAClBnB,EAAc,GACdE,GAAc,SAACD,GAAD,OACZQ,YAAYR,EAAaF,EAAWF,GAAce,QAAQ,OAE5DC,QAAQC,IAAIb,IAoCV,iCAGA,cAACgB,EAAA,EAAD,CAAQC,QAAQ,sBAAsBC,QApCxB,WACdlB,GAAc,IAChBD,EAAcS,YAAYV,EAAaF,EAAe,IAAIe,QAAQ,KAClEV,GAAc,SAACD,GAAD,OAAgBQ,YAAYR,EAAa,IAAKW,QAAQ,OACpEC,QAAQC,IAAIb,KAEZD,EACES,YAAYV,EAAaF,EAAeI,GAAYW,QAAQ,KAE9DV,GAAc,SAACD,GAAD,OAAgBQ,YAAY,GAAGG,QAAQ,SA2BnD,0BAGA,cAACK,EAAA,EAAD,CAAQC,QAAQ,8BAA8BC,QA1B7B,WACnBnB,EAAcS,YAAYV,EAAaF,EAAaI,GAAYW,QAAQ,KACxEV,EAAc,GACdW,QAAQC,IAAIb,IAuBV,iCCjFOmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c150c0c1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [bitcoinPrice, setBitcoinPrice] = useState(5000);\n  const [accountPLN, setAccountPLN] = useState(10000);\n  const [accountBTC, setAccountBTC] = useState(0);\n  const [change, setChange] = useState(5000);\n\n  \n  useEffect(() => {\n    bitcoin();\n    percent();\n  }, []);\n\n  const bitcoin = () => {\n    let randomNumber = parseFloat((Math.random() * 20 - 10).toFixed(3));\n    setBitcoinPrice((bitcoinPrice) =>\n      parseFloat((bitcoinPrice + randomNumber).toFixed(3))\n    );\n    console.log(bitcoinPrice);\n    setTimeout(bitcoin, 1000);\n  };\n\n  const percent = () => {\n    setChange(change - bitcoinPrice);\n    setTimeout(percent, 1000);\n  }\n\n  const buyBitcoin = () => {\n    if (accountPLN >= 1000) {\n      setAccountPLN(accountPLN - 1000);\n      setAccountBTC((accountBTC) =>\n        parseFloat((accountBTC + 1000 / bitcoinPrice).toFixed(6))\n      );\n      console.log(accountBTC);\n    } else {\n      setAccountPLN(0);\n      setAccountBTC((accountBTC) =>\n        parseFloat((accountBTC + accountPLN / bitcoinPrice).toFixed(6))\n      );\n    }\n  };\n\n  const buyMAXBitcoin = () => {\n      setAccountPLN(0);\n      setAccountBTC((accountBTC) =>\n        parseFloat((accountBTC + accountPLN/bitcoinPrice).toFixed(6))\n      );\n      console.log(accountBTC);\n  };\n\n  const sellBitcoin = () => {\n    if (accountBTC >= 0.1) {\n      setAccountPLN(parseFloat((accountPLN + bitcoinPrice / 10).toFixed(6)));\n      setAccountBTC((accountBTC) => parseFloat((accountBTC - 0.1).toFixed(6)));\n      console.log(accountBTC);\n    } else {\n      setAccountPLN(\n        parseFloat((accountPLN + bitcoinPrice * accountBTC).toFixed(6))\n      );\n      setAccountBTC((accountBTC) => parseFloat((0).toFixed(6)));\n    }\n  };\n\n  const sellMAXBitcoin = () => {\n      setAccountPLN(parseFloat((accountPLN + bitcoinPrice*accountBTC).toFixed(6)));\n      setAccountBTC(0);\n      console.log(accountBTC);\n  };\n\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"price\">1 BTC = {bitcoinPrice} PLN </div>\n      <div className=\"account-container\">\n        <div className=\"account\">TOTAL BALANCE:</div>\n        <div className=\"account\">{accountPLN} PLN</div>\n        <div className=\"account\">{accountBTC} BTC</div>\n      </div>\n\n      <div className=\"button-container w-50 m-auto\">\n        <Button variant=\"primary m-1 btn-lg \" onClick={buyBitcoin}>\n          Buy BTC for 1000 PLN\n        </Button>\n        <Button variant=\"outline-primary m-1 btn-lg \" onClick={buyMAXBitcoin}>\n          Buy BTC for MAX PLN\n        </Button>\n        <Button variant=\"success m-1 btn-lg \" onClick={sellBitcoin}>\n          Sell 0.1 BTC\n        </Button>\n        <Button variant=\"outline-success m-1 btn-lg \" onClick={sellMAXBitcoin}>\n          Sell MAX BTC\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}